
Arduino-keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000eee  00000f82  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a0  0080010e  0080010e  00000f90  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000f90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00000fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004484  00000000  00000000  00001238  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000151c  00000000  00000000  000056bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000268e  00000000  00000000  00006bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000790  00000000  00000000  00009268  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b41  00000000  00000000  000099f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000299e  00000000  00000000  0000b539  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000288  00000000  00000000  0000ded7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	92 c0       	rjmp	.+292    	; 0x126 <__ctors_end>
   2:	00 00       	nop
   4:	ab c0       	rjmp	.+342    	; 0x15c <__bad_interrupt>
   6:	00 00       	nop
   8:	a9 c0       	rjmp	.+338    	; 0x15c <__bad_interrupt>
   a:	00 00       	nop
   c:	a7 c0       	rjmp	.+334    	; 0x15c <__bad_interrupt>
   e:	00 00       	nop
  10:	a5 c0       	rjmp	.+330    	; 0x15c <__bad_interrupt>
  12:	00 00       	nop
  14:	a3 c0       	rjmp	.+326    	; 0x15c <__bad_interrupt>
  16:	00 00       	nop
  18:	a1 c0       	rjmp	.+322    	; 0x15c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	9f c0       	rjmp	.+318    	; 0x15c <__bad_interrupt>
  1e:	00 00       	nop
  20:	9d c0       	rjmp	.+314    	; 0x15c <__bad_interrupt>
  22:	00 00       	nop
  24:	9b c0       	rjmp	.+310    	; 0x15c <__bad_interrupt>
  26:	00 00       	nop
  28:	99 c0       	rjmp	.+306    	; 0x15c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	b1 c3       	rjmp	.+1890   	; 0x790 <__vector_11>
  2e:	00 00       	nop
  30:	95 c0       	rjmp	.+298    	; 0x15c <__bad_interrupt>
  32:	00 00       	nop
  34:	93 c0       	rjmp	.+294    	; 0x15c <__bad_interrupt>
  36:	00 00       	nop
  38:	91 c0       	rjmp	.+290    	; 0x15c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	8f c0       	rjmp	.+286    	; 0x15c <__bad_interrupt>
  3e:	00 00       	nop
  40:	8d c0       	rjmp	.+282    	; 0x15c <__bad_interrupt>
  42:	00 00       	nop
  44:	8b c0       	rjmp	.+278    	; 0x15c <__bad_interrupt>
  46:	00 00       	nop
  48:	89 c0       	rjmp	.+274    	; 0x15c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	87 c0       	rjmp	.+270    	; 0x15c <__bad_interrupt>
  4e:	00 00       	nop
  50:	85 c0       	rjmp	.+266    	; 0x15c <__bad_interrupt>
  52:	00 00       	nop
  54:	83 c0       	rjmp	.+262    	; 0x15c <__bad_interrupt>
  56:	00 00       	nop
  58:	81 c0       	rjmp	.+258    	; 0x15c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	47 c1       	rjmp	.+654    	; 0x2ec <__vector_23>
  5e:	00 00       	nop
  60:	7d c0       	rjmp	.+250    	; 0x15c <__bad_interrupt>
  62:	00 00       	nop
  64:	7b c0       	rjmp	.+246    	; 0x15c <__bad_interrupt>
  66:	00 00       	nop
  68:	79 c0       	rjmp	.+242    	; 0x15c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	77 c0       	rjmp	.+238    	; 0x15c <__bad_interrupt>
  6e:	00 00       	nop
  70:	75 c0       	rjmp	.+234    	; 0x15c <__bad_interrupt>
  72:	00 00       	nop
  74:	88 04       	cpc	r8, r8
  76:	a4 04       	cpc	r10, r4
  78:	56 05       	cpc	r21, r6
  7a:	a4 04       	cpc	r10, r4
  7c:	56 05       	cpc	r21, r6
  7e:	dc 04       	cpc	r13, r12
  80:	f9 04       	cpc	r15, r9
  82:	56 05       	cpc	r21, r6
  84:	19 05       	cpc	r17, r9
  86:	2b 05       	cpc	r18, r11

00000088 <ProductString>:
  88:	12 03 4b 00 65 00 79 00 62 00 6f 00 61 00 72 00     ..K.e.y.b.o.a.r.
  98:	64 00 00 00                                         d...

0000009c <ManufacturerString>:
  9c:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
  ac:	00 00                                               ..

000000ae <LanguageString>:
  ae:	04 03 09 04                                         ....

000000b2 <ConfigurationDescriptor>:
  b2:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 01     ..".....2.......
  c2:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
  d2:	00 0a                                               ..

000000d4 <DeviceDescriptor>:
  d4:	12 01 10 01 00 00 00 08 eb 03 42 20 00 00 01 02     ..........B ....
  e4:	00 01                                               ..

000000e6 <KeyboardReport>:
  e6:	05 01 09 06 a1 01 75 01 95 08 05 07 19 e0 29 e7     ......u.......).
  f6:	15 00 25 01 81 02 95 01 75 08 81 03 95 05 75 01     ..%.....u.....u.
 106:	05 08 19 01 29 05 91 02 95 01 75 03 91 03 95 06     ....).....u.....
 116:	75 08 15 00 26 e7 00 05 07 19 00 29 e7 81 00 c0     u...&......)....

00000126 <__ctors_end>:
 126:	11 24       	eor	r1, r1
 128:	1f be       	out	0x3f, r1	; 63
 12a:	cf ef       	ldi	r28, 0xFF	; 255
 12c:	d2 e0       	ldi	r29, 0x02	; 2
 12e:	de bf       	out	0x3e, r29	; 62
 130:	cd bf       	out	0x3d, r28	; 61

00000132 <__do_copy_data>:
 132:	11 e0       	ldi	r17, 0x01	; 1
 134:	a0 e0       	ldi	r26, 0x00	; 0
 136:	b1 e0       	ldi	r27, 0x01	; 1
 138:	ee ee       	ldi	r30, 0xEE	; 238
 13a:	fe e0       	ldi	r31, 0x0E	; 14
 13c:	02 c0       	rjmp	.+4      	; 0x142 <__do_copy_data+0x10>
 13e:	05 90       	lpm	r0, Z+
 140:	0d 92       	st	X+, r0
 142:	ae 30       	cpi	r26, 0x0E	; 14
 144:	b1 07       	cpc	r27, r17
 146:	d9 f7       	brne	.-10     	; 0x13e <__do_copy_data+0xc>

00000148 <__do_clear_bss>:
 148:	21 e0       	ldi	r18, 0x01	; 1
 14a:	ae e0       	ldi	r26, 0x0E	; 14
 14c:	b1 e0       	ldi	r27, 0x01	; 1
 14e:	01 c0       	rjmp	.+2      	; 0x152 <.do_clear_bss_start>

00000150 <.do_clear_bss_loop>:
 150:	1d 92       	st	X+, r1

00000152 <.do_clear_bss_start>:
 152:	ae 3a       	cpi	r26, 0xAE	; 174
 154:	b2 07       	cpc	r27, r18
 156:	e1 f7       	brne	.-8      	; 0x150 <.do_clear_bss_loop>
 158:	52 d0       	rcall	.+164    	; 0x1fe <main>
 15a:	c7 c6       	rjmp	.+3470   	; 0xeea <_exit>

0000015c <__bad_interrupt>:
 15c:	51 cf       	rjmp	.-350    	; 0x0 <__vectors>

0000015e <SetupHardware>:
	}
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 15e:	af 92       	push	r10
 160:	bf 92       	push	r11
 162:	df 92       	push	r13
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 170:	84 b7       	in	r24, 0x34	; 52
 172:	87 7f       	andi	r24, 0xF7	; 247
 174:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	a8 95       	wdr
 17c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 180:	88 61       	ori	r24, 0x18	; 24
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 186:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__EEPROM_REGION_LENGTH__+0x7f0060>
 18a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 18c:	8c ec       	ldi	r24, 0xCC	; 204
 18e:	a8 2e       	mov	r10, r24
 190:	b1 2c       	mov	r11, r1
 192:	87 e6       	ldi	r24, 0x67	; 103
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	f5 01       	movw	r30, r10
 198:	91 83       	std	Z+1, r25	; 0x01
 19a:	80 83       	st	Z, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 19c:	9a ec       	ldi	r25, 0xCA	; 202
 19e:	e9 2e       	mov	r14, r25
 1a0:	f1 2c       	mov	r15, r1
 1a2:	26 e0       	ldi	r18, 0x06	; 6
 1a4:	d2 2e       	mov	r13, r18
 1a6:	f7 01       	movw	r30, r14
 1a8:	d0 82       	st	Z, r13
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 1aa:	08 ec       	ldi	r16, 0xC8	; 200
 1ac:	10 e0       	ldi	r17, 0x00	; 0
 1ae:	f8 01       	movw	r30, r16
 1b0:	10 82       	st	Z, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 1b2:	c9 ec       	ldi	r28, 0xC9	; 201
 1b4:	d0 e0       	ldi	r29, 0x00	; 0
 1b6:	88 e1       	ldi	r24, 0x18	; 24
 1b8:	88 83       	st	Y, r24
				
				DDRD  |= (1 << 3);
 1ba:	53 9a       	sbi	0x0a, 3	; 10
	wdt_disable();

	/* Hardware Initialization */
	Serial_Init(9600, false);
	USB_Init();
 1bc:	5a 9a       	sbi	0x0b, 2	; 11

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
 1be:	dd d2       	rcall	.+1466   	; 0x77a <USB_Init>
 1c0:	84 e0       	ldi	r24, 0x04	; 4
	
	/* Pull target /RESET line high */
	AVR_RESET_LINE_PORT |= AVR_RESET_LINE_MASK;
 1c2:	85 bd       	out	0x25, r24	; 37
	AVR_RESET_LINE_DDR  |= AVR_RESET_LINE_MASK;
 1c4:	5f 9a       	sbi	0x0b, 7	; 11

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
 1c6:	57 9a       	sbi	0x0a, 7	; 10
	UCSR1A = 0;
 1c8:	18 82       	st	Y, r1
 1ca:	f8 01       	movw	r30, r16
	UCSR1C = 0;
 1cc:	10 82       	st	Z, r1
 1ce:	f7 01       	movw	r30, r14

	/* Special case 57600 baud for compatibility with the ATmega328 bootloader. */	
	UBRR1  = SERIAL_2X_UBBRVAL(9600);
 1d0:	10 82       	st	Z, r1
 1d2:	8f ec       	ldi	r24, 0xCF	; 207
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	f5 01       	movw	r30, r10
 1d8:	91 83       	std	Z+1, r25	; 0x01

	UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 1da:	80 83       	st	Z, r24
 1dc:	f7 01       	movw	r30, r14
	UCSR1A = (1 << U2X1);
 1de:	d0 82       	st	Z, r13
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	f8 01       	movw	r30, r16
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 1e4:	80 83       	st	Z, r24
 1e6:	88 e9       	ldi	r24, 0x98	; 152
}
 1e8:	88 83       	st	Y, r24
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	1f 91       	pop	r17
 1f0:	0f 91       	pop	r16
 1f2:	ff 90       	pop	r15
 1f4:	ef 90       	pop	r14
 1f6:	df 90       	pop	r13
 1f8:	bf 90       	pop	r11
 1fa:	af 90       	pop	r10
 1fc:	08 95       	ret

000001fe <main>:

/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
 1fe:	af df       	rcall	.-162    	; 0x15e <SetupHardware>
 200:	2f b7       	in	r18, 0x3f	; 63
 202:	f8 94       	cli
 204:	8f e1       	ldi	r24, 0x1F	; 31
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <USARTtoUSB_Buffer+0x81>
 20c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <USARTtoUSB_Buffer+0x80>
 210:	90 93 a2 01 	sts	0x01A2, r25	; 0x8001a2 <USARTtoUSB_Buffer+0x83>
 214:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <USARTtoUSB_Buffer+0x82>
 218:	2f bf       	out	0x3f, r18	; 63
 21a:	78 94       	sei
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	91 e0       	ldi	r25, 0x01	; 1
 220:	9c d5       	rcall	.+2872   	; 0xd5a <HID_Device_USBTask>
 222:	4d d4       	rcall	.+2202   	; 0xabe <USB_USBTask>
 224:	fb cf       	rjmp	.-10     	; 0x21c <main+0x1e>

00000226 <EVENT_USB_Device_Connect>:
 226:	08 95       	ret

00000228 <EVENT_USB_Device_Disconnect>:
 228:	08 95       	ret

0000022a <EVENT_USB_Device_ConfigurationChanged>:
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	73 d5       	rcall	.+2790   	; 0xd16 <HID_Device_ConfigureEndpoints>
 230:	e2 ee       	ldi	r30, 0xE2	; 226
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	84 60       	ori	r24, 0x04	; 4
 238:	80 83       	st	Z, r24
 23a:	08 95       	ret

0000023c <EVENT_USB_Device_UnhandledControlRequest>:
 23c:	80 e0       	ldi	r24, 0x00	; 0
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	4f c4       	rjmp	.+2206   	; 0xae0 <HID_Device_ProcessControlRequest>

00000242 <EVENT_USB_Device_StartOfFrame>:
 242:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <Keyboard_HID_Interface+0xb>
 246:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <Keyboard_HID_Interface+0xc>
 24a:	00 97       	sbiw	r24, 0x00	; 0
 24c:	29 f0       	breq	.+10     	; 0x258 <EVENT_USB_Device_StartOfFrame+0x16>
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <Keyboard_HID_Interface+0xc>
 254:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <Keyboard_HID_Interface+0xb>
 258:	08 95       	ret

0000025a <CALLBACK_HID_Device_CreateHIDReport>:
 25a:	0f 93       	push	r16
 25c:	1f 93       	push	r17
 25e:	9f b7       	in	r25, 0x3f	; 63
 260:	f8 94       	cli
 262:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <USARTtoUSB_Buffer+0x84>
 266:	9f bf       	out	0x3f, r25	; 63
 268:	88 30       	cpi	r24, 0x08	; 8
 26a:	48 f1       	brcs	.+82     	; 0x2be <CALLBACK_HID_Device_CreateHIDReport+0x64>
 26c:	af e0       	ldi	r26, 0x0F	; 15
 26e:	b1 e0       	ldi	r27, 0x01	; 1
 270:	6f e1       	ldi	r22, 0x1F	; 31
 272:	71 e0       	ldi	r23, 0x01	; 1
 274:	e0 91 a1 01 	lds	r30, 0x01A1	; 0x8001a1 <USARTtoUSB_Buffer+0x82>
 278:	f0 91 a2 01 	lds	r31, 0x01A2	; 0x8001a2 <USARTtoUSB_Buffer+0x83>
 27c:	91 91       	ld	r25, Z+
 27e:	f0 93 a2 01 	sts	0x01A2, r31	; 0x8001a2 <USARTtoUSB_Buffer+0x83>
 282:	e0 93 a1 01 	sts	0x01A1, r30	; 0x8001a1 <USARTtoUSB_Buffer+0x82>
 286:	ef 59       	subi	r30, 0x9F	; 159
 288:	f1 40       	sbci	r31, 0x01	; 1
 28a:	21 f4       	brne	.+8      	; 0x294 <CALLBACK_HID_Device_CreateHIDReport+0x3a>
 28c:	70 93 a2 01 	sts	0x01A2, r23	; 0x8001a2 <USARTtoUSB_Buffer+0x83>
 290:	60 93 a1 01 	sts	0x01A1, r22	; 0x8001a1 <USARTtoUSB_Buffer+0x82>
 294:	4f b7       	in	r20, 0x3f	; 63
 296:	f8 94       	cli
 298:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <USARTtoUSB_Buffer+0x84>
 29c:	81 50       	subi	r24, 0x01	; 1
 29e:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <USARTtoUSB_Buffer+0x84>
 2a2:	4f bf       	out	0x3f, r20	; 63
 2a4:	9d 93       	st	X+, r25
 2a6:	e1 e0       	ldi	r30, 0x01	; 1
 2a8:	a7 31       	cpi	r26, 0x17	; 23
 2aa:	be 07       	cpc	r27, r30
 2ac:	19 f7       	brne	.-58     	; 0x274 <CALLBACK_HID_Device_CreateHIDReport+0x1a>
 2ae:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 2b2:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__EEPROM_REGION_LENGTH__+0x7f00c8>
 2b6:	95 ff       	sbrs	r25, 5
 2b8:	fc cf       	rjmp	.-8      	; 0x2b2 <CALLBACK_HID_Device_CreateHIDReport+0x58>
 2ba:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
 2be:	af e0       	ldi	r26, 0x0F	; 15
 2c0:	b1 e0       	ldi	r27, 0x01	; 1
 2c2:	f9 01       	movw	r30, r18
 2c4:	8d 91       	ld	r24, X+
 2c6:	81 93       	st	Z+, r24
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	a7 31       	cpi	r26, 0x17	; 23
 2cc:	b8 07       	cpc	r27, r24
 2ce:	d1 f7       	brne	.-12     	; 0x2c4 <CALLBACK_HID_Device_CreateHIDReport+0x6a>
 2d0:	88 e0       	ldi	r24, 0x08	; 8
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	f8 01       	movw	r30, r16
 2d6:	91 83       	std	Z+1, r25	; 0x01
 2d8:	80 83       	st	Z, r24
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	1f 91       	pop	r17
 2de:	0f 91       	pop	r16
 2e0:	08 95       	ret

000002e2 <CALLBACK_HID_Device_ProcessHIDReport>:
 2e2:	f9 01       	movw	r30, r18
 2e4:	80 81       	ld	r24, Z
 2e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
 2ea:	08 95       	ret

000002ec <__vector_23>:
 2ec:	1f 92       	push	r1
 2ee:	0f 92       	push	r0
 2f0:	0f b6       	in	r0, 0x3f	; 63
 2f2:	0f 92       	push	r0
 2f4:	11 24       	eor	r1, r1
 2f6:	2f 93       	push	r18
 2f8:	8f 93       	push	r24
 2fa:	9f 93       	push	r25
 2fc:	ef 93       	push	r30
 2fe:	ff 93       	push	r31
 300:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__EEPROM_REGION_LENGTH__+0x7f00ce>
 304:	9e b3       	in	r25, 0x1e	; 30
 306:	94 30       	cpi	r25, 0x04	; 4
 308:	f1 f4       	brne	.+60     	; 0x346 <__stack+0x47>
 30a:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <USARTtoUSB_Buffer+0x80>
 30e:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <USARTtoUSB_Buffer+0x81>
 312:	80 83       	st	Z, r24
 314:	e0 91 9f 01 	lds	r30, 0x019F	; 0x80019f <USARTtoUSB_Buffer+0x80>
 318:	f0 91 a0 01 	lds	r31, 0x01A0	; 0x8001a0 <USARTtoUSB_Buffer+0x81>
 31c:	cf 01       	movw	r24, r30
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <USARTtoUSB_Buffer+0x81>
 324:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <USARTtoUSB_Buffer+0x80>
 328:	8f 59       	subi	r24, 0x9F	; 159
 32a:	91 40       	sbci	r25, 0x01	; 1
 32c:	21 f4       	brne	.+8      	; 0x336 <__stack+0x37>
 32e:	8f e1       	ldi	r24, 0x1F	; 31
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	92 83       	std	Z+2, r25	; 0x02
 334:	81 83       	std	Z+1, r24	; 0x01
 336:	9f b7       	in	r25, 0x3f	; 63
 338:	f8 94       	cli
 33a:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <USARTtoUSB_Buffer+0x84>
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <USARTtoUSB_Buffer+0x84>
 344:	9f bf       	out	0x3f, r25	; 63
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 35a:	29 2f       	mov	r18, r25
 35c:	33 27       	eor	r19, r19
 35e:	23 30       	cpi	r18, 0x03	; 3
 360:	31 05       	cpc	r19, r1
 362:	e1 f0       	breq	.+56     	; 0x39c <CALLBACK_USB_GetDescriptor+0x42>
 364:	58 f4       	brcc	.+22     	; 0x37c <CALLBACK_USB_GetDescriptor+0x22>
 366:	21 30       	cpi	r18, 0x01	; 1
 368:	31 05       	cpc	r19, r1
 36a:	99 f0       	breq	.+38     	; 0x392 <CALLBACK_USB_GetDescriptor+0x38>
 36c:	22 30       	cpi	r18, 0x02	; 2
 36e:	31 05       	cpc	r19, r1
 370:	69 f5       	brne	.+90     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 372:	82 e2       	ldi	r24, 0x22	; 34
 374:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 376:	22 eb       	ldi	r18, 0xB2	; 178
 378:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 37a:	2c c0       	rjmp	.+88     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 37c:	21 32       	cpi	r18, 0x21	; 33
 37e:	31 05       	cpc	r19, r1
 380:	01 f1       	breq	.+64     	; 0x3c2 <CALLBACK_USB_GetDescriptor+0x68>
 382:	22 32       	cpi	r18, 0x22	; 34
 384:	31 05       	cpc	r19, r1
 386:	11 f5       	brne	.+68     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x72>
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&KeyboardReport;
			Size    = sizeof(KeyboardReport);
 388:	80 e4       	ldi	r24, 0x40	; 64
 38a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&KeyboardReport;
 38c:	26 ee       	ldi	r18, 0xE6	; 230
 38e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(KeyboardReport);
			break;
 390:	21 c0       	rjmp	.+66     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 392:	82 e1       	ldi	r24, 0x12	; 18
 394:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
 396:	24 ed       	ldi	r18, 0xD4	; 212
 398:	30 e0       	ldi	r19, 0x00	; 0
 39a:	1c c0       	rjmp	.+56     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 39c:	99 27       	eor	r25, r25
 39e:	81 30       	cpi	r24, 0x01	; 1
 3a0:	91 05       	cpc	r25, r1
 3a2:	49 f0       	breq	.+18     	; 0x3b6 <CALLBACK_USB_GetDescriptor+0x5c>
 3a4:	28 f0       	brcs	.+10     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x56>
 3a6:	02 97       	sbiw	r24, 0x02	; 2
 3a8:	89 f4       	brne	.+34     	; 0x3cc <CALLBACK_USB_GetDescriptor+0x72>
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3aa:	e8 e8       	ldi	r30, 0x88	; 136
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String: 
			switch (DescriptorNumber)
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3b0:	ee ea       	ldi	r30, 0xAE	; 174
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	02 c0       	rjmp	.+4      	; 0x3ba <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3b6:	ec e9       	ldi	r30, 0x9C	; 156
 3b8:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3ba:	84 91       	lpm	r24, Z
 3bc:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
 3be:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3c0:	09 c0       	rjmp	.+18     	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x7a>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 3c2:	89 e0       	ldi	r24, 0x09	; 9
 3c4:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_KeyboardHID;
 3c6:	24 ec       	ldi	r18, 0xC4	; 196
 3c8:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 3cc:	80 e0       	ldi	r24, 0x00	; 0
 3ce:	90 e0       	ldi	r25, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 3d0:	20 e0       	ldi	r18, 0x00	; 0
 3d2:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}
	
	*DescriptorAddress = Address;
 3d4:	fa 01       	movw	r30, r20
 3d6:	31 83       	std	Z+1, r19	; 0x01
 3d8:	20 83       	st	Z, r18
	return Size;
}
 3da:	08 95       	ret

000003dc <Endpoint_BytesToEPSizeMaskDynamic>:
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 3dc:	ac 01       	movw	r20, r24
 3de:	28 e0       	ldi	r18, 0x08	; 8
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	24 17       	cp	r18, r20
 3e6:	35 07       	cpc	r19, r21
 3e8:	20 f4       	brcc	.+8      	; 0x3f2 <Endpoint_BytesToEPSizeMaskDynamic+0x16>
 3ea:	8f 5f       	subi	r24, 0xFF	; 255
 3ec:	22 0f       	add	r18, r18
 3ee:	33 1f       	adc	r19, r19
 3f0:	f9 cf       	rjmp	.-14     	; 0x3e4 <Endpoint_BytesToEPSizeMaskDynamic+0x8>
 3f2:	82 95       	swap	r24
 3f4:	80 7f       	andi	r24, 0xF0	; 240
 3f6:	08 95       	ret

000003f8 <Endpoint_ConfigureEndpoint_Prv>:
 3f8:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 3fc:	eb ee       	ldi	r30, 0xEB	; 235
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	80 81       	ld	r24, Z
 402:	81 60       	ori	r24, 0x01	; 1
 404:	80 83       	st	Z, r24
 406:	ed ee       	ldi	r30, 0xED	; 237
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	10 82       	st	Z, r1
 40c:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 410:	40 83       	st	Z, r20
 412:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__EEPROM_REGION_LENGTH__+0x7f00ee>
 416:	88 1f       	adc	r24, r24
 418:	88 27       	eor	r24, r24
 41a:	88 1f       	adc	r24, r24
 41c:	08 95       	ret

0000041e <Endpoint_ClearEndpoints>:
 41e:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__EEPROM_REGION_LENGTH__+0x7f00f4>
 422:	80 e0       	ldi	r24, 0x00	; 0
 424:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 428:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__EEPROM_REGION_LENGTH__+0x7f00f0>
 42c:	10 92 e8 00 	sts	0x00E8, r1	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 430:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <__EEPROM_REGION_LENGTH__+0x7f00ed>
 434:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 438:	9e 7f       	andi	r25, 0xFE	; 254
 43a:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 43e:	8f 5f       	subi	r24, 0xFF	; 255
 440:	85 30       	cpi	r24, 0x05	; 5
 442:	81 f7       	brne	.-32     	; 0x424 <Endpoint_ClearEndpoints+0x6>
 444:	08 95       	ret

00000446 <Endpoint_ClearStatusStage>:
 446:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 44a:	87 ff       	sbrs	r24, 7
 44c:	0f c0       	rjmp	.+30     	; 0x46c <Endpoint_ClearStatusStage+0x26>
 44e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 452:	82 fd       	sbrc	r24, 2
 454:	04 c0       	rjmp	.+8      	; 0x45e <Endpoint_ClearStatusStage+0x18>
 456:	8e b3       	in	r24, 0x1e	; 30
 458:	81 11       	cpse	r24, r1
 45a:	f9 cf       	rjmp	.-14     	; 0x44e <Endpoint_ClearStatusStage+0x8>
 45c:	10 c0       	rjmp	.+32     	; 0x47e <Endpoint_ClearStatusStage+0x38>
 45e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 462:	8b 77       	andi	r24, 0x7B	; 123
 464:	0a c0       	rjmp	.+20     	; 0x47a <Endpoint_ClearStatusStage+0x34>
 466:	8e b3       	in	r24, 0x1e	; 30
 468:	88 23       	and	r24, r24
 46a:	49 f0       	breq	.+18     	; 0x47e <Endpoint_ClearStatusStage+0x38>
 46c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 470:	80 ff       	sbrs	r24, 0
 472:	f9 cf       	rjmp	.-14     	; 0x466 <Endpoint_ClearStatusStage+0x20>
 474:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 478:	8e 77       	andi	r24, 0x7E	; 126
 47a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 47e:	08 95       	ret

00000480 <Endpoint_WaitUntilReady>:
 480:	85 e6       	ldi	r24, 0x65	; 101
 482:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__EEPROM_REGION_LENGTH__+0x7f00ec>
 486:	90 ff       	sbrs	r25, 0
 488:	05 c0       	rjmp	.+10     	; 0x494 <Endpoint_WaitUntilReady+0x14>
 48a:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 48e:	90 ff       	sbrs	r25, 0
 490:	05 c0       	rjmp	.+10     	; 0x49c <Endpoint_WaitUntilReady+0x1c>
 492:	1b c0       	rjmp	.+54     	; 0x4ca <Endpoint_WaitUntilReady+0x4a>
 494:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 498:	92 fd       	sbrc	r25, 2
 49a:	17 c0       	rjmp	.+46     	; 0x4ca <Endpoint_WaitUntilReady+0x4a>
 49c:	9e b3       	in	r25, 0x1e	; 30
 49e:	99 23       	and	r25, r25
 4a0:	b1 f0       	breq	.+44     	; 0x4ce <Endpoint_WaitUntilReady+0x4e>
 4a2:	9e b3       	in	r25, 0x1e	; 30
 4a4:	95 30       	cpi	r25, 0x05	; 5
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <Endpoint_WaitUntilReady+0x52>
 4a8:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 4ac:	95 fd       	sbrc	r25, 5
 4ae:	13 c0       	rjmp	.+38     	; 0x4d6 <Endpoint_WaitUntilReady+0x56>
 4b0:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 4b4:	92 ff       	sbrs	r25, 2
 4b6:	e5 cf       	rjmp	.-54     	; 0x482 <Endpoint_WaitUntilReady+0x2>
 4b8:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 4bc:	9b 7f       	andi	r25, 0xFB	; 251
 4be:	90 93 e1 00 	sts	0x00E1, r25	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 4c2:	81 50       	subi	r24, 0x01	; 1
 4c4:	f1 f6       	brne	.-68     	; 0x482 <Endpoint_WaitUntilReady+0x2>
 4c6:	84 e0       	ldi	r24, 0x04	; 4
 4c8:	08 95       	ret
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	08 95       	ret
 4ce:	82 e0       	ldi	r24, 0x02	; 2
 4d0:	08 95       	ret
 4d2:	83 e0       	ldi	r24, 0x03	; 3
 4d4:	08 95       	ret
 4d6:	81 e0       	ldi	r24, 0x01	; 1
 4d8:	08 95       	ret

000004da <Endpoint_Write_Stream_LE>:
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	8c 01       	movw	r16, r24
 4e8:	eb 01       	movw	r28, r22
 4ea:	7a 01       	movw	r14, r20
 4ec:	c9 df       	rcall	.-110    	; 0x480 <Endpoint_WaitUntilReady>
 4ee:	81 11       	cpse	r24, r1
 4f0:	1d c0       	rjmp	.+58     	; 0x52c <Endpoint_Write_Stream_LE+0x52>
 4f2:	20 97       	sbiw	r28, 0x00	; 0
 4f4:	d1 f0       	breq	.+52     	; 0x52a <Endpoint_Write_Stream_LE+0x50>
 4f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 4fa:	85 fd       	sbrc	r24, 5
 4fc:	0e c0       	rjmp	.+28     	; 0x51a <Endpoint_Write_Stream_LE+0x40>
 4fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 502:	8e 77       	andi	r24, 0x7E	; 126
 504:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 508:	e1 14       	cp	r14, r1
 50a:	f1 04       	cpc	r15, r1
 50c:	79 f3       	breq	.-34     	; 0x4ec <Endpoint_Write_Stream_LE+0x12>
 50e:	f7 01       	movw	r30, r14
 510:	09 95       	icall
 512:	81 30       	cpi	r24, 0x01	; 1
 514:	59 f7       	brne	.-42     	; 0x4ec <Endpoint_Write_Stream_LE+0x12>
 516:	85 e0       	ldi	r24, 0x05	; 5
 518:	09 c0       	rjmp	.+18     	; 0x52c <Endpoint_Write_Stream_LE+0x52>
 51a:	f8 01       	movw	r30, r16
 51c:	80 81       	ld	r24, Z
 51e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 522:	21 97       	sbiw	r28, 0x01	; 1
 524:	0f 5f       	subi	r16, 0xFF	; 255
 526:	1f 4f       	sbci	r17, 0xFF	; 255
 528:	e4 cf       	rjmp	.-56     	; 0x4f2 <Endpoint_Write_Stream_LE+0x18>
 52a:	80 e0       	ldi	r24, 0x00	; 0
 52c:	df 91       	pop	r29
 52e:	cf 91       	pop	r28
 530:	1f 91       	pop	r17
 532:	0f 91       	pop	r16
 534:	ff 90       	pop	r15
 536:	ef 90       	pop	r14
 538:	08 95       	ret

0000053a <Endpoint_Write_Control_Stream_LE>:
 53a:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <USB_ControlRequest+0x6>
 53e:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <USB_ControlRequest+0x7>
 542:	26 17       	cp	r18, r22
 544:	37 07       	cpc	r19, r23
 546:	48 f0       	brcs	.+18     	; 0x55a <Endpoint_Write_Control_Stream_LE+0x20>
 548:	61 15       	cp	r22, r1
 54a:	71 05       	cpc	r23, r1
 54c:	39 f4       	brne	.+14     	; 0x55c <Endpoint_Write_Control_Stream_LE+0x22>
 54e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 552:	2e 77       	andi	r18, 0x7E	; 126
 554:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 558:	01 c0       	rjmp	.+2      	; 0x55c <Endpoint_Write_Control_Stream_LE+0x22>
 55a:	b9 01       	movw	r22, r18
 55c:	30 e0       	ldi	r19, 0x00	; 0
 55e:	61 15       	cp	r22, r1
 560:	71 05       	cpc	r23, r1
 562:	61 f1       	breq	.+88     	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x82>
 564:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 568:	23 fd       	sbrc	r18, 3
 56a:	37 c0       	rjmp	.+110    	; 0x5da <Endpoint_Write_Control_Stream_LE+0xa0>
 56c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 570:	22 fd       	sbrc	r18, 2
 572:	2d c0       	rjmp	.+90     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0x94>
 574:	2e b3       	in	r18, 0x1e	; 30
 576:	22 23       	and	r18, r18
 578:	91 f1       	breq	.+100    	; 0x5de <Endpoint_Write_Control_Stream_LE+0xa4>
 57a:	2e b3       	in	r18, 0x1e	; 30
 57c:	25 30       	cpi	r18, 0x05	; 5
 57e:	89 f1       	breq	.+98     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xa8>
 580:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 584:	20 ff       	sbrs	r18, 0
 586:	eb cf       	rjmp	.-42     	; 0x55e <Endpoint_Write_Control_Stream_LE+0x24>
 588:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 58c:	fc 01       	movw	r30, r24
 58e:	cf 01       	movw	r24, r30
 590:	61 15       	cp	r22, r1
 592:	71 05       	cpc	r23, r1
 594:	49 f0       	breq	.+18     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x6e>
 596:	28 30       	cpi	r18, 0x08	; 8
 598:	38 f4       	brcc	.+14     	; 0x5a8 <Endpoint_Write_Control_Stream_LE+0x6e>
 59a:	81 91       	ld	r24, Z+
 59c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 5a0:	61 50       	subi	r22, 0x01	; 1
 5a2:	71 09       	sbc	r23, r1
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	f3 cf       	rjmp	.-26     	; 0x58e <Endpoint_Write_Control_Stream_LE+0x54>
 5a8:	31 e0       	ldi	r19, 0x01	; 1
 5aa:	28 30       	cpi	r18, 0x08	; 8
 5ac:	09 f0       	breq	.+2      	; 0x5b0 <Endpoint_Write_Control_Stream_LE+0x76>
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5b4:	2e 77       	andi	r18, 0x7E	; 126
 5b6:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5ba:	d1 cf       	rjmp	.-94     	; 0x55e <Endpoint_Write_Control_Stream_LE+0x24>
 5bc:	31 11       	cpse	r19, r1
 5be:	d2 cf       	rjmp	.-92     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x2a>
 5c0:	06 c0       	rjmp	.+12     	; 0x5ce <Endpoint_Write_Control_Stream_LE+0x94>
 5c2:	8e b3       	in	r24, 0x1e	; 30
 5c4:	88 23       	and	r24, r24
 5c6:	59 f0       	breq	.+22     	; 0x5de <Endpoint_Write_Control_Stream_LE+0xa4>
 5c8:	8e b3       	in	r24, 0x1e	; 30
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	51 f0       	breq	.+20     	; 0x5e2 <Endpoint_Write_Control_Stream_LE+0xa8>
 5ce:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5d2:	82 ff       	sbrs	r24, 2
 5d4:	f6 cf       	rjmp	.-20     	; 0x5c2 <Endpoint_Write_Control_Stream_LE+0x88>
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	08 95       	ret
 5de:	82 e0       	ldi	r24, 0x02	; 2
 5e0:	08 95       	ret
 5e2:	83 e0       	ldi	r24, 0x03	; 3
 5e4:	08 95       	ret

000005e6 <Endpoint_Write_Control_PStream_LE>:
 5e6:	20 91 ac 01 	lds	r18, 0x01AC	; 0x8001ac <USB_ControlRequest+0x6>
 5ea:	30 91 ad 01 	lds	r19, 0x01AD	; 0x8001ad <USB_ControlRequest+0x7>
 5ee:	26 17       	cp	r18, r22
 5f0:	37 07       	cpc	r19, r23
 5f2:	48 f0       	brcs	.+18     	; 0x606 <Endpoint_Write_Control_PStream_LE+0x20>
 5f4:	61 15       	cp	r22, r1
 5f6:	71 05       	cpc	r23, r1
 5f8:	39 f4       	brne	.+14     	; 0x608 <Endpoint_Write_Control_PStream_LE+0x22>
 5fa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 5fe:	2e 77       	andi	r18, 0x7E	; 126
 600:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 604:	01 c0       	rjmp	.+2      	; 0x608 <Endpoint_Write_Control_PStream_LE+0x22>
 606:	b9 01       	movw	r22, r18
 608:	30 e0       	ldi	r19, 0x00	; 0
 60a:	61 15       	cp	r22, r1
 60c:	71 05       	cpc	r23, r1
 60e:	69 f1       	breq	.+90     	; 0x66a <Endpoint_Write_Control_PStream_LE+0x84>
 610:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 614:	23 fd       	sbrc	r18, 3
 616:	38 c0       	rjmp	.+112    	; 0x688 <Endpoint_Write_Control_PStream_LE+0xa2>
 618:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 61c:	22 fd       	sbrc	r18, 2
 61e:	2e c0       	rjmp	.+92     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x96>
 620:	2e b3       	in	r18, 0x1e	; 30
 622:	22 23       	and	r18, r18
 624:	99 f1       	breq	.+102    	; 0x68c <Endpoint_Write_Control_PStream_LE+0xa6>
 626:	2e b3       	in	r18, 0x1e	; 30
 628:	25 30       	cpi	r18, 0x05	; 5
 62a:	91 f1       	breq	.+100    	; 0x690 <Endpoint_Write_Control_PStream_LE+0xaa>
 62c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 630:	20 ff       	sbrs	r18, 0
 632:	eb cf       	rjmp	.-42     	; 0x60a <Endpoint_Write_Control_PStream_LE+0x24>
 634:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
 638:	fc 01       	movw	r30, r24
 63a:	cf 01       	movw	r24, r30
 63c:	61 15       	cp	r22, r1
 63e:	71 05       	cpc	r23, r1
 640:	51 f0       	breq	.+20     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x70>
 642:	28 30       	cpi	r18, 0x08	; 8
 644:	40 f4       	brcc	.+16     	; 0x656 <Endpoint_Write_Control_PStream_LE+0x70>
 646:	84 91       	lpm	r24, Z
 648:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 64c:	61 50       	subi	r22, 0x01	; 1
 64e:	71 09       	sbc	r23, r1
 650:	2f 5f       	subi	r18, 0xFF	; 255
 652:	31 96       	adiw	r30, 0x01	; 1
 654:	f2 cf       	rjmp	.-28     	; 0x63a <Endpoint_Write_Control_PStream_LE+0x54>
 656:	31 e0       	ldi	r19, 0x01	; 1
 658:	28 30       	cpi	r18, 0x08	; 8
 65a:	09 f0       	breq	.+2      	; 0x65e <Endpoint_Write_Control_PStream_LE+0x78>
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 662:	2e 77       	andi	r18, 0x7E	; 126
 664:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 668:	d0 cf       	rjmp	.-96     	; 0x60a <Endpoint_Write_Control_PStream_LE+0x24>
 66a:	31 11       	cpse	r19, r1
 66c:	d1 cf       	rjmp	.-94     	; 0x610 <Endpoint_Write_Control_PStream_LE+0x2a>
 66e:	06 c0       	rjmp	.+12     	; 0x67c <Endpoint_Write_Control_PStream_LE+0x96>
 670:	8e b3       	in	r24, 0x1e	; 30
 672:	88 23       	and	r24, r24
 674:	59 f0       	breq	.+22     	; 0x68c <Endpoint_Write_Control_PStream_LE+0xa6>
 676:	8e b3       	in	r24, 0x1e	; 30
 678:	85 30       	cpi	r24, 0x05	; 5
 67a:	51 f0       	breq	.+20     	; 0x690 <Endpoint_Write_Control_PStream_LE+0xaa>
 67c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 680:	82 ff       	sbrs	r24, 2
 682:	f6 cf       	rjmp	.-20     	; 0x670 <Endpoint_Write_Control_PStream_LE+0x8a>
 684:	80 e0       	ldi	r24, 0x00	; 0
 686:	08 95       	ret
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	08 95       	ret
 68c:	82 e0       	ldi	r24, 0x02	; 2
 68e:	08 95       	ret
 690:	83 e0       	ldi	r24, 0x03	; 3
 692:	08 95       	ret

00000694 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 694:	61 15       	cp	r22, r1
 696:	71 05       	cpc	r23, r1
 698:	29 f4       	brne	.+10     	; 0x6a4 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 69a:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 69e:	2b 77       	andi	r18, 0x7B	; 123
 6a0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	  Endpoint_ClearOUT();
	
	while (Length)
 6a4:	61 15       	cp	r22, r1
 6a6:	71 05       	cpc	r23, r1
 6a8:	11 f1       	breq	.+68     	; 0x6ee <Endpoint_Read_Control_Stream_LE+0x5a>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6aa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	{
		if (Endpoint_IsSETUPReceived())
 6ae:	23 fd       	sbrc	r18, 3
 6b0:	24 c0       	rjmp	.+72     	; 0x6fa <Endpoint_Read_Control_Stream_LE+0x66>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6b2:	2e b3       	in	r18, 0x1e	; 30
 6b4:	22 23       	and	r18, r18
 6b6:	19 f1       	breq	.+70     	; 0x6fe <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6b8:	2e b3       	in	r18, 0x1e	; 30
 6ba:	25 30       	cpi	r18, 0x05	; 5
 6bc:	11 f1       	breq	.+68     	; 0x702 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6be:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6c2:	22 ff       	sbrs	r18, 2
 6c4:	ef cf       	rjmp	.-34     	; 0x6a4 <Endpoint_Read_Control_Stream_LE+0x10>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6c6:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__EEPROM_REGION_LENGTH__+0x7f00f2>
		{
			while (Length && Endpoint_BytesInEndpoint())
 6ca:	22 23       	and	r18, r18
 6cc:	31 f3       	breq	.-52     	; 0x69a <Endpoint_Read_Control_Stream_LE+0x6>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6ce:	01 96       	adiw	r24, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 6d0:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 6d4:	fc 01       	movw	r30, r24
 6d6:	31 97       	sbiw	r30, 0x01	; 1
 6d8:	20 83       	st	Z, r18
				Length--;
 6da:	61 50       	subi	r22, 0x01	; 1
 6dc:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 6de:	99 f7       	brne	.-26     	; 0x6c6 <Endpoint_Read_Control_Stream_LE+0x32>
 6e0:	dc cf       	rjmp	.-72     	; 0x69a <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6e2:	8e b3       	in	r24, 0x1e	; 30
 6e4:	88 23       	and	r24, r24
 6e6:	59 f0       	breq	.+22     	; 0x6fe <Endpoint_Read_Control_Stream_LE+0x6a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6e8:	8e b3       	in	r24, 0x1e	; 30
 6ea:	85 30       	cpi	r24, 0x05	; 5
 6ec:	51 f0       	breq	.+20     	; 0x702 <Endpoint_Read_Control_Stream_LE+0x6e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 6ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 6f2:	80 ff       	sbrs	r24, 0
 6f4:	f6 cf       	rjmp	.-20     	; 0x6e2 <Endpoint_Read_Control_Stream_LE+0x4e>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 6f6:	80 e0       	ldi	r24, 0x00	; 0
 6f8:	08 95       	ret
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	08 95       	ret

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 6fe:	82 e0       	ldi	r24, 0x02	; 2
 700:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 702:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 704:	08 95       	ret

00000706 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
	USB_INT_ClearAllInterrupts();
 706:	3e d0       	rcall	.+124    	; 0x784 <USB_INT_DisableAllInterrupts>
 708:	40 d0       	rcall	.+128    	; 0x78a <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
 70a:	1e ba       	out	0x1e, r1	; 30
	USB_ConfigurationNumber  = 0;
 70c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <USB_ConfigurationNumber>
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 710:	84 e0       	ldi	r24, 0x04	; 4
 712:	89 bd       	out	0x29, r24	; 41
				PLLCSR |= (1 << PLLE);
 714:	89 b5       	in	r24, 0x29	; 41
 716:	82 60       	ori	r24, 0x02	; 2
 718:	89 bd       	out	0x29, r24	; 41
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 71a:	09 b4       	in	r0, 0x29	; 41
 71c:	00 fe       	sbrs	r0, 0
 71e:	fd cf       	rjmp	.-6      	; 0x71a <USB_ResetInterface+0x14>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 720:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				
				USBCON = (Temp & ~(1 << USBE));
 724:	98 2f       	mov	r25, r24
 726:	9f 77       	andi	r25, 0x7F	; 127
 728:	90 93 d8 00 	sts	0x00D8, r25	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
				USBCON = (Temp |  (1 << USBE));
 72c:	80 68       	ori	r24, 0x80	; 128
 72e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 732:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
 736:	8e 7f       	andi	r24, 0xFE	; 254
 738:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <__EEPROM_REGION_LENGTH__+0x7f0063>
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 73c:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 740:	8f 7d       	andi	r24, 0xDF	; 223
 742:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 746:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
 74a:	8e 7f       	andi	r24, 0xFE	; 254
 74c:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__EEPROM_REGION_LENGTH__+0x7f00e0>
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 750:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 754:	8e 7f       	andi	r24, 0xFE	; 254
 756:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	USB_INT_Enable(USB_INT_SUSPEND);
 75a:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 75e:	81 60       	ori	r24, 0x01	; 1
 760:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	USB_INT_Clear(USB_INT_EORSTI);
 764:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 768:	87 7f       	andi	r24, 0xF7	; 247
 76a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
	USB_INT_Enable(USB_INT_EORSTI);
 76e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 772:	88 60       	ori	r24, 0x08	; 8
 774:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 778:	08 95       	ret

0000077a <USB_Init>:
			   
               #if !defined(USE_STATIC_OPTIONS)
               const uint8_t Options
               #endif
               )
{
 77a:	c5 df       	rcall	.-118    	; 0x706 <USB_ResetInterface>
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	80 93 a5 01 	sts	0x01A5, r24	; 0x8001a5 <USB_IsInitialized>
 782:	08 95       	ret

00000784 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 784:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 788:	08 95       	ret

0000078a <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 78a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 78e:	08 95       	ret

00000790 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 790:	1f 92       	push	r1
 792:	0f 92       	push	r0
 794:	0f b6       	in	r0, 0x3f	; 63
 796:	0f 92       	push	r0
 798:	11 24       	eor	r1, r1
 79a:	2f 93       	push	r18
 79c:	3f 93       	push	r19
 79e:	4f 93       	push	r20
 7a0:	5f 93       	push	r21
 7a2:	6f 93       	push	r22
 7a4:	7f 93       	push	r23
 7a6:	8f 93       	push	r24
 7a8:	9f 93       	push	r25
 7aa:	af 93       	push	r26
 7ac:	bf 93       	push	r27
 7ae:	ef 93       	push	r30
 7b0:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 7b2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7b6:	80 ff       	sbrs	r24, 0
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <__vector_11+0x60>
 7ba:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7be:	80 ff       	sbrs	r24, 0
 7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 7c2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7c6:	8e 7f       	andi	r24, 0xFE	; 254
 7c8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_SUSPEND);
 7cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7d0:	8e 7f       	andi	r24, 0xFE	; 254
 7d2:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_WAKEUP);
 7d6:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7da:	80 61       	ori	r24, 0x10	; 16
 7dc:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 7e0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 7e4:	80 62       	ori	r24, 0x20	; 32
 7e6:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 7ea:	19 bc       	out	0x29, r1	; 41
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
 7ec:	1e ba       	out	0x1e, r1	; 30
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 7ee:	1c dd       	rcall	.-1480   	; 0x228 <EVENT_USB_Device_Disconnect>
 7f0:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 7f4:	84 ff       	sbrs	r24, 4
 7f6:	29 c0       	rjmp	.+82     	; 0x84a <__vector_11+0xba>
 7f8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 7fc:	84 ff       	sbrs	r24, 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 7fe:	25 c0       	rjmp	.+74     	; 0x84a <__vector_11+0xba>
 800:	84 e0       	ldi	r24, 0x04	; 4
				PLLCSR |= (1 << PLLE);
 802:	89 bd       	out	0x29, r24	; 41
 804:	89 b5       	in	r24, 0x29	; 41
 806:	82 60       	ori	r24, 0x02	; 2
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 808:	89 bd       	out	0x29, r24	; 41
 80a:	09 b4       	in	r0, 0x29	; 41
 80c:	00 fe       	sbrs	r0, 0
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 80e:	fd cf       	rjmp	.-6      	; 0x80a <__vector_11+0x7a>
 810:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
 814:	8f 7d       	andi	r24, 0xDF	; 223
 816:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__EEPROM_REGION_LENGTH__+0x7f00d8>
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 81a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 81e:	8f 7e       	andi	r24, 0xEF	; 239
 820:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>

		USB_INT_Disable(USB_INT_WAKEUP);
 824:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 828:	8f 7e       	andi	r24, 0xEF	; 239
 82a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		USB_INT_Enable(USB_INT_SUSPEND);
 82e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 832:	81 60       	ori	r24, 0x01	; 1
 834:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 838:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ConfigurationNumber>
 83c:	81 11       	cpse	r24, r1
 83e:	02 c0       	rjmp	.+4      	; 0x844 <__vector_11+0xb4>
 840:	81 e0       	ldi	r24, 0x01	; 1
		EVENT_USB_Device_Connect();
 842:	01 c0       	rjmp	.+2      	; 0x846 <__vector_11+0xb6>
 844:	84 e0       	ldi	r24, 0x04	; 4
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 846:	8e bb       	out	0x1e, r24	; 30
 848:	ee dc       	rcall	.-1572   	; 0x226 <EVENT_USB_Device_Connect>
 84a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 84e:	83 ff       	sbrs	r24, 3
 850:	22 c0       	rjmp	.+68     	; 0x896 <__vector_11+0x106>
 852:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
	{
		USB_INT_Clear(USB_INT_EORSTI);
 856:	83 ff       	sbrs	r24, 3
 858:	1e c0       	rjmp	.+60     	; 0x896 <__vector_11+0x106>
 85a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 85e:	87 7f       	andi	r24, 0xF7	; 247

		USB_DeviceState         = DEVICE_STATE_Default;
 860:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		USB_ConfigurationNumber = 0;
 864:	82 e0       	ldi	r24, 0x02	; 2
 866:	8e bb       	out	0x1e, r24	; 30

		USB_INT_Clear(USB_INT_SUSPEND);
 868:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <USB_ConfigurationNumber>
 86c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 870:	8e 7f       	andi	r24, 0xFE	; 254
		USB_INT_Disable(USB_INT_SUSPEND);
 872:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 876:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 87a:	8e 7f       	andi	r24, 0xFE	; 254
		USB_INT_Enable(USB_INT_WAKEUP);
 87c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 880:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>

		Endpoint_ClearEndpoints();
 884:	80 61       	ori	r24, 0x10	; 16
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 886:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 88a:	c9 dd       	rcall	.-1134   	; 0x41e <Endpoint_ClearEndpoints>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 88c:	42 e0       	ldi	r20, 0x02	; 2
 88e:	60 e0       	ldi	r22, 0x00	; 0
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	b2 dd       	rcall	.-1180   	; 0x3f8 <Endpoint_ConfigureEndpoint_Prv>
 894:	13 d1       	rcall	.+550    	; 0xabc <USB_Event_Stub>
 896:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 89a:	82 ff       	sbrs	r24, 2
 89c:	0a c0       	rjmp	.+20     	; 0x8b2 <__vector_11+0x122>
	{
		USB_INT_Clear(USB_INT_SOFI);
 89e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__EEPROM_REGION_LENGTH__+0x7f00e2>
 8a2:	82 ff       	sbrs	r24, 2
 8a4:	06 c0       	rjmp	.+12     	; 0x8b2 <__vector_11+0x122>
		
		EVENT_USB_Device_StartOfFrame();
 8a6:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 8aa:	8b 7f       	andi	r24, 0xFB	; 251
 8ac:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__EEPROM_REGION_LENGTH__+0x7f00e1>
 8b0:	c8 dc       	rcall	.-1648   	; 0x242 <EVENT_USB_Device_StartOfFrame>
 8b2:	ff 91       	pop	r31
 8b4:	ef 91       	pop	r30
 8b6:	bf 91       	pop	r27
 8b8:	af 91       	pop	r26
 8ba:	9f 91       	pop	r25
 8bc:	8f 91       	pop	r24
 8be:	7f 91       	pop	r23
 8c0:	6f 91       	pop	r22
 8c2:	5f 91       	pop	r21
 8c4:	4f 91       	pop	r20
 8c6:	3f 91       	pop	r19
 8c8:	2f 91       	pop	r18
 8ca:	0f 90       	pop	r0
 8cc:	0f be       	out	0x3f, r0	; 63
 8ce:	0f 90       	pop	r0
 8d0:	1f 90       	pop	r1
 8d2:	18 95       	reti

000008d4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	00 d0       	rcall	.+0      	; 0x8dc <USB_Device_ProcessControlRequest+0x8>
 8dc:	cd b7       	in	r28, 0x3d	; 61
 8de:	de b7       	in	r29, 0x3e	; 62
 8e0:	e6 ea       	ldi	r30, 0xA6	; 166
 8e2:	f1 e0       	ldi	r31, 0x01	; 1
 8e4:	8e ea       	ldi	r24, 0xAE	; 174
 8e6:	91 e0       	ldi	r25, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 8e8:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 8ec:	21 93       	st	Z+, r18
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 8ee:	8e 17       	cp	r24, r30
 8f0:	9f 07       	cpc	r25, r31
 8f2:	d1 f7       	brne	.-12     	; 0x8e8 <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 8f4:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
	
	switch (USB_ControlRequest.bRequest)
 8f8:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <USB_ControlRequest+0x1>
 8fc:	49 2f       	mov	r20, r25
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	4a 30       	cpi	r20, 0x0A	; 10
 902:	51 05       	cpc	r21, r1
 904:	08 f0       	brcs	.+2      	; 0x908 <USB_Device_ProcessControlRequest+0x34>
 906:	d2 c0       	rjmp	.+420    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
 908:	fa 01       	movw	r30, r20
 90a:	e6 5c       	subi	r30, 0xC6	; 198
 90c:	ff 4f       	sbci	r31, 0xFF	; 255
 90e:	ca c2       	rjmp	.+1428   	; 0xea4 <__tablejump2__>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 910:	80 38       	cpi	r24, 0x80	; 128
 912:	09 f4       	brne	.+2      	; 0x916 <USB_Device_ProcessControlRequest+0x42>
 914:	bc c0       	rjmp	.+376    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
 916:	82 38       	cpi	r24, 0x82	; 130
 918:	09 f0       	breq	.+2      	; 0x91c <USB_Device_ProcessControlRequest+0x48>
 91a:	c8 c0       	rjmp	.+400    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 91c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <USB_ControlRequest+0x4>
 920:	87 70       	andi	r24, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 922:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 926:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 92a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 92e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 932:	97 7f       	andi	r25, 0xF7	; 247
 934:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 938:	85 fb       	bst	r24, 5
 93a:	88 27       	eor	r24, r24
 93c:	80 f9       	bld	r24, 0
 93e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
				UEDATX = (Word >> 8);
 942:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 946:	80 c0       	rjmp	.+256    	; 0xa48 <USB_Device_ProcessControlRequest+0x174>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 948:	28 2f       	mov	r18, r24
 94a:	2d 7f       	andi	r18, 0xFD	; 253
 94c:	09 f0       	breq	.+2      	; 0x950 <USB_Device_ProcessControlRequest+0x7c>
 94e:	ae c0       	rjmp	.+348    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 950:	82 30       	cpi	r24, 0x02	; 2
 952:	09 f0       	breq	.+2      	; 0x956 <USB_Device_ProcessControlRequest+0x82>
 954:	9c c0       	rjmp	.+312    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 956:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 95a:	81 11       	cpse	r24, r1
 95c:	27 c0       	rjmp	.+78     	; 0x9ac <USB_Device_ProcessControlRequest+0xd8>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 95e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <USB_ControlRequest+0x4>
 962:	87 70       	andi	r24, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 964:	09 f4       	brne	.+2      	; 0x968 <USB_Device_ProcessControlRequest+0x94>
 966:	93 c0       	rjmp	.+294    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 968:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 96c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 970:	20 ff       	sbrs	r18, 0
 972:	8d c0       	rjmp	.+282    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 974:	93 30       	cpi	r25, 0x03	; 3
 976:	21 f4       	brne	.+8      	; 0x980 <USB_Device_ProcessControlRequest+0xac>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 978:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 97c:	80 62       	ori	r24, 0x20	; 32
 97e:	14 c0       	rjmp	.+40     	; 0x9a8 <USB_Device_ProcessControlRequest+0xd4>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 980:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 984:	90 61       	ori	r25, 0x10	; 16
 986:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 98a:	21 e0       	ldi	r18, 0x01	; 1
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	a9 01       	movw	r20, r18
 990:	02 c0       	rjmp	.+4      	; 0x996 <USB_Device_ProcessControlRequest+0xc2>
 992:	44 0f       	add	r20, r20
 994:	55 1f       	adc	r21, r21
 996:	8a 95       	dec	r24
 998:	e2 f7       	brpl	.-8      	; 0x992 <USB_Device_ProcessControlRequest+0xbe>
 99a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
				UERST = 0;
 99e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__EEPROM_REGION_LENGTH__+0x7f00ea>
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9a2:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 9a6:	88 60       	ori	r24, 0x08	; 8
 9a8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9ac:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9b0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9b4:	87 7f       	andi	r24, 0xF7	; 247
 9b6:	4b c0       	rjmp	.+150    	; 0xa4e <USB_Device_ProcessControlRequest+0x17a>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9b8:	81 11       	cpse	r24, r1
 9ba:	78 c0       	rjmp	.+240    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9bc:	10 91 a8 01 	lds	r17, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 9c0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 9c4:	87 7f       	andi	r24, 0xF7	; 247
 9c6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 9ca:	3d dd       	rcall	.-1414   	; 0x446 <Endpoint_ClearStatusStage>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 9cc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	while (!(Endpoint_IsINReady()))
 9d0:	80 fd       	sbrc	r24, 0
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <USB_Device_ProcessControlRequest+0x108>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 9d4:	8e b3       	in	r24, 0x1e	; 30
 9d6:	81 11       	cpse	r24, r1
 9d8:	f9 cf       	rjmp	.-14     	; 0x9cc <USB_Device_ProcessControlRequest+0xf8>
 9da:	59 c0       	rjmp	.+178    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9dc:	81 2f       	mov	r24, r17
 9de:	8f 77       	andi	r24, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 9e0:	11 f4       	brne	.+4      	; 0x9e6 <USB_Device_ProcessControlRequest+0x112>
 9e2:	92 e0       	ldi	r25, 0x02	; 2
 9e4:	01 c0       	rjmp	.+2      	; 0x9e8 <USB_Device_ProcessControlRequest+0x114>
 9e6:	93 e0       	ldi	r25, 0x03	; 3
 9e8:	9e bb       	out	0x1e, r25	; 30
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 9ea:	80 68       	ori	r24, 0x80	; 128
 9ec:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__EEPROM_REGION_LENGTH__+0x7f00e3>
 9f0:	4e c0       	rjmp	.+156    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 9f2:	80 58       	subi	r24, 0x80	; 128
 9f4:	82 30       	cpi	r24, 0x02	; 2
 9f6:	08 f0       	brcs	.+2      	; 0x9fa <USB_Device_ProcessControlRequest+0x126>
 9f8:	59 c0       	rjmp	.+178    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 9fa:	ae 01       	movw	r20, r28
 9fc:	4f 5f       	subi	r20, 0xFF	; 255
 9fe:	5f 4f       	sbci	r21, 0xFF	; 255
 a00:	60 91 aa 01 	lds	r22, 0x01AA	; 0x8001aa <USB_ControlRequest+0x4>
 a04:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 a08:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x3>
 a0c:	a6 dc       	rcall	.-1716   	; 0x35a <CALLBACK_USB_GetDescriptor>
 a0e:	bc 01       	movw	r22, r24
 a10:	89 2b       	or	r24, r25
 a12:	09 f4       	brne	.+2      	; 0xa16 <USB_Device_ProcessControlRequest+0x142>
 a14:	3c c0       	rjmp	.+120    	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a16:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a1a:	97 7f       	andi	r25, 0xF7	; 247
 a1c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 a20:	89 81       	ldd	r24, Y+1	; 0x01
 a22:	9a 81       	ldd	r25, Y+2	; 0x02
 a24:	e0 dd       	rcall	.-1088   	; 0x5e6 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a26:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a2a:	8b 77       	andi	r24, 0x7B	; 123
 a2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a30:	2e c0       	rjmp	.+92     	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a32:	80 38       	cpi	r24, 0x80	; 128
 a34:	d9 f5       	brne	.+118    	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a36:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a3a:	87 7f       	andi	r24, 0xF7	; 247
 a3c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a40:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ConfigurationNumber>
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a44:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a48:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a4c:	8e 77       	andi	r24, 0x7E	; 126
 a4e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a52:	f9 dc       	rcall	.-1550   	; 0x446 <Endpoint_ClearStatusStage>
 a54:	1c c0       	rjmp	.+56     	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a56:	81 11       	cpse	r24, r1
 a58:	29 c0       	rjmp	.+82     	; 0xaac <USB_Device_ProcessControlRequest+0x1d8>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a5a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 a5e:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x3>
 a62:	99 27       	eor	r25, r25
 a64:	02 97       	sbiw	r24, 0x02	; 2
 a66:	9c f4       	brge	.+38     	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a68:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 a6c:	87 7f       	andi	r24, 0xF7	; 247
 a6e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a72:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 a76:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <USB_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 a7a:	e5 dc       	rcall	.-1590   	; 0x446 <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 a7c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <USB_ConfigurationNumber>
 a80:	81 11       	cpse	r24, r1
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <USB_Device_ProcessControlRequest+0x1b4>
 a84:	83 e0       	ldi	r24, 0x03	; 3
 a86:	01 c0       	rjmp	.+2      	; 0xa8a <USB_Device_ProcessControlRequest+0x1b6>
 a88:	84 e0       	ldi	r24, 0x04	; 4

	EVENT_USB_Device_ConfigurationChanged();
 a8a:	8e bb       	out	0x1e, r24	; 30
 a8c:	ce db       	rcall	.-2148   	; 0x22a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 a8e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 a92:	83 ff       	sbrs	r24, 3
 a94:	0d c0       	rjmp	.+26     	; 0xab0 <USB_Device_ProcessControlRequest+0x1dc>
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 a96:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
 a9a:	80 62       	ori	r24, 0x20	; 32
 a9c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__EEPROM_REGION_LENGTH__+0x7f00eb>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 aa0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 aa4:	87 7f       	andi	r24, 0xF7	; 247
 aa6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <USB_Device_ProcessControlRequest+0x1dc>
 aac:	c7 db       	rcall	.-2162   	; 0x23c <EVENT_USB_Device_UnhandledControlRequest>
 aae:	ef cf       	rjmp	.-34     	; 0xa8e <USB_Device_ProcessControlRequest+0x1ba>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
 ab0:	0f 90       	pop	r0
 ab2:	0f 90       	pop	r0
 ab4:	df 91       	pop	r29
 ab6:	cf 91       	pop	r28
 ab8:	1f 91       	pop	r17
 aba:	08 95       	ret

00000abc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 abc:	08 95       	ret

00000abe <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 abe:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ac0:	8e b3       	in	r24, 0x1e	; 30
 ac2:	88 23       	and	r24, r24
 ac4:	59 f0       	breq	.+22     	; 0xadc <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ac6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
 aca:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 acc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ad0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
		  USB_Device_ProcessControlRequest();
 ad4:	83 fd       	sbrc	r24, 3
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 ad6:	fe de       	rcall	.-516    	; 0x8d4 <USB_Device_ProcessControlRequest>
 ad8:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 adc:	cf 91       	pop	r28
 ade:	08 95       	ret

00000ae0 <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 ae0:	8f 92       	push	r8
 ae2:	9f 92       	push	r9
 ae4:	af 92       	push	r10
 ae6:	bf 92       	push	r11
 ae8:	cf 92       	push	r12
 aea:	df 92       	push	r13
 aec:	ef 92       	push	r14
 aee:	ff 92       	push	r15
 af0:	0f 93       	push	r16
 af2:	1f 93       	push	r17
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
 af8:	00 d0       	rcall	.+0      	; 0xafa <HID_Device_ProcessControlRequest+0x1a>
 afa:	1f 92       	push	r1
 afc:	cd b7       	in	r28, 0x3d	; 61
 afe:	de b7       	in	r29, 0x3e	; 62
 b00:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 b02:	cd b6       	in	r12, 0x3d	; 61
 b04:	de b6       	in	r13, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b06:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 b0a:	83 ff       	sbrs	r24, 3
 b0c:	ef c0       	rjmp	.+478    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b0e:	f7 01       	movw	r30, r14
 b10:	80 81       	ld	r24, Z
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <USB_ControlRequest+0x4>
 b18:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <USB_ControlRequest+0x5>
 b1c:	28 17       	cp	r18, r24
 b1e:	39 07       	cpc	r19, r25
 b20:	09 f0       	breq	.+2      	; 0xb24 <HID_Device_ProcessControlRequest+0x44>
 b22:	e4 c0       	rjmp	.+456    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
	  return;

	switch (USB_ControlRequest.bRequest)
 b24:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <USB_ControlRequest+0x1>
 b28:	83 30       	cpi	r24, 0x03	; 3
 b2a:	09 f4       	brne	.+2      	; 0xb2e <HID_Device_ProcessControlRequest+0x4e>
 b2c:	91 c0       	rjmp	.+290    	; 0xc50 <HID_Device_ProcessControlRequest+0x170>
 b2e:	30 f4       	brcc	.+12     	; 0xb3c <HID_Device_ProcessControlRequest+0x5c>
 b30:	81 30       	cpi	r24, 0x01	; 1
 b32:	71 f0       	breq	.+28     	; 0xb50 <HID_Device_ProcessControlRequest+0x70>
 b34:	82 30       	cpi	r24, 0x02	; 2
 b36:	09 f4       	brne	.+2      	; 0xb3a <HID_Device_ProcessControlRequest+0x5a>
 b38:	c1 c0       	rjmp	.+386    	; 0xcbc <HID_Device_ProcessControlRequest+0x1dc>
 b3a:	d8 c0       	rjmp	.+432    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 b3c:	8a 30       	cpi	r24, 0x0A	; 10
 b3e:	09 f4       	brne	.+2      	; 0xb42 <HID_Device_ProcessControlRequest+0x62>
 b40:	a6 c0       	rjmp	.+332    	; 0xc8e <HID_Device_ProcessControlRequest+0x1ae>
 b42:	8b 30       	cpi	r24, 0x0B	; 11
 b44:	09 f4       	brne	.+2      	; 0xb48 <HID_Device_ProcessControlRequest+0x68>
 b46:	91 c0       	rjmp	.+290    	; 0xc6a <HID_Device_ProcessControlRequest+0x18a>
 b48:	89 30       	cpi	r24, 0x09	; 9
 b4a:	09 f0       	breq	.+2      	; 0xb4e <HID_Device_ProcessControlRequest+0x6e>
 b4c:	cf c0       	rjmp	.+414    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 b4e:	4d c0       	rjmp	.+154    	; 0xbea <HID_Device_ProcessControlRequest+0x10a>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 b50:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 b54:	81 3a       	cpi	r24, 0xA1	; 161
 b56:	09 f0       	breq	.+2      	; 0xb5a <HID_Device_ProcessControlRequest+0x7a>
 b58:	c9 c0       	rjmp	.+402    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
			{
 b5a:	8d b6       	in	r8, 0x3d	; 61
 b5c:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 b62:	87 7f       	andi	r24, 0xF7	; 247
 b64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 b68:	1a 82       	std	Y+2, r1	; 0x02
 b6a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 b6c:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 b70:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x3>
 b74:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 b76:	f7 01       	movw	r30, r14
 b78:	87 81       	ldd	r24, Z+7	; 0x07
 b7a:	48 2f       	mov	r20, r24
 b7c:	50 e0       	ldi	r21, 0x00	; 0
 b7e:	8d b7       	in	r24, 0x3d	; 61
 b80:	9e b7       	in	r25, 0x3e	; 62
 b82:	84 1b       	sub	r24, r20
 b84:	95 0b       	sbc	r25, r21
 b86:	0f b6       	in	r0, 0x3f	; 63
 b88:	f8 94       	cli
 b8a:	9e bf       	out	0x3e, r25	; 62
 b8c:	0f be       	out	0x3f, r0	; 63
 b8e:	8d bf       	out	0x3d, r24	; 61
 b90:	ed b7       	in	r30, 0x3d	; 61
 b92:	fe b7       	in	r31, 0x3e	; 62
 b94:	31 96       	adiw	r30, 0x01	; 1
 b96:	5f 01       	movw	r10, r30

				memset(ReportData, 0, sizeof(ReportData));
 b98:	60 e0       	ldi	r22, 0x00	; 0
 b9a:	70 e0       	ldi	r23, 0x00	; 0
 b9c:	cf 01       	movw	r24, r30
 b9e:	9e d1       	rcall	.+828    	; 0xedc <memset>

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 ba0:	4f ef       	ldi	r20, 0xFF	; 255
 ba2:	41 0f       	add	r20, r17
 ba4:	8e 01       	movw	r16, r28
 ba6:	0f 5f       	subi	r16, 0xFF	; 255
 ba8:	1f 4f       	sbci	r17, 0xFF	; 255
 baa:	95 01       	movw	r18, r10
 bac:	be 01       	movw	r22, r28
 bae:	6d 5f       	subi	r22, 0xFD	; 253
 bb0:	7f 4f       	sbci	r23, 0xFF	; 255
 bb2:	c7 01       	movw	r24, r14
 bb4:	52 db       	rcall	.-2396   	; 0x25a <CALLBACK_HID_Device_CreateHIDReport>
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 bb6:	f7 01       	movw	r30, r14
 bb8:	85 81       	ldd	r24, Z+5	; 0x05
 bba:	96 81       	ldd	r25, Z+6	; 0x06
 bbc:	00 97       	sbiw	r24, 0x00	; 0
 bbe:	21 f0       	breq	.+8      	; 0xbc8 <HID_Device_ProcessControlRequest+0xe8>
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 bc0:	47 81       	ldd	r20, Z+7	; 0x07
 bc2:	50 e0       	ldi	r21, 0x00	; 0
 bc4:	b5 01       	movw	r22, r10
 bc6:	81 d1       	rcall	.+770    	; 0xeca <memcpy>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bc8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 bcc:	69 81       	ldd	r22, Y+1	; 0x01
 bce:	7a 81       	ldd	r23, Y+2	; 0x02
 bd0:	c5 01       	movw	r24, r10
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bd2:	b3 dc       	rcall	.-1690   	; 0x53a <Endpoint_Write_Control_Stream_LE>
 bd4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bd8:	8b 77       	andi	r24, 0x7B	; 123
 bda:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bde:	0f b6       	in	r0, 0x3f	; 63
 be0:	f8 94       	cli
 be2:	9e be       	out	0x3e, r9	; 62
 be4:	0f be       	out	0x3f, r0	; 63
 be6:	8d be       	out	0x3d, r8	; 61
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 be8:	81 c0       	rjmp	.+258    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 bea:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 bee:	81 32       	cpi	r24, 0x21	; 33
 bf0:	09 f0       	breq	.+2      	; 0xbf4 <HID_Device_ProcessControlRequest+0x114>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bf2:	7c c0       	rjmp	.+248    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 bf4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 bf8:	87 7f       	andi	r24, 0xF7	; 247
 bfa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 bfe:	00 91 ac 01 	lds	r16, 0x01AC	; 0x8001ac <USB_ControlRequest+0x6>
 c02:	10 91 ad 01 	lds	r17, 0x01AD	; 0x8001ad <USB_ControlRequest+0x7>
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c06:	a0 90 a8 01 	lds	r10, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 c0a:	b0 90 a9 01 	lds	r11, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x3>
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c0e:	8d b7       	in	r24, 0x3d	; 61
 c10:	9e b7       	in	r25, 0x3e	; 62
 c12:	80 1b       	sub	r24, r16
 c14:	91 0b       	sbc	r25, r17
 c16:	0f b6       	in	r0, 0x3f	; 63
 c18:	f8 94       	cli
 c1a:	9e bf       	out	0x3e, r25	; 62
 c1c:	0f be       	out	0x3f, r0	; 63
 c1e:	8d bf       	out	0x3d, r24	; 61
 c20:	ed b7       	in	r30, 0x3d	; 61
 c22:	fe b7       	in	r31, 0x3e	; 62

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 c24:	31 96       	adiw	r30, 0x01	; 1
 c26:	4f 01       	movw	r8, r30
 c28:	b8 01       	movw	r22, r16
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 c2a:	cf 01       	movw	r24, r30
 c2c:	33 dd       	rcall	.-1434   	; 0x694 <Endpoint_Read_Control_Stream_LE>
 c2e:	4f ef       	ldi	r20, 0xFF	; 255
 c30:	4b 0d       	add	r20, r11
 c32:	94 01       	movw	r18, r8
 c34:	6a 2d       	mov	r22, r10
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c36:	c7 01       	movw	r24, r14
 c38:	54 db       	rcall	.-2392   	; 0x2e2 <CALLBACK_HID_Device_ProcessHIDReport>
 c3a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c3e:	8e 77       	andi	r24, 0x7E	; 126
 c40:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c44:	0f b6       	in	r0, 0x3f	; 63
 c46:	f8 94       	cli
 c48:	de be       	out	0x3e, r13	; 62
 c4a:	0f be       	out	0x3f, r0	; 63
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c4c:	cd be       	out	0x3d, r12	; 61
 c4e:	4e c0       	rjmp	.+156    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 c50:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 c54:	81 3a       	cpi	r24, 0xA1	; 161
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c56:	09 f0       	breq	.+2      	; 0xc5a <HID_Device_ProcessControlRequest+0x17a>
 c58:	49 c0       	rjmp	.+146    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 c5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c5e:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 c60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c64:	f7 01       	movw	r30, r14
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c66:	80 85       	ldd	r24, Z+8	; 0x08
 c68:	39 c0       	rjmp	.+114    	; 0xcdc <HID_Device_ProcessControlRequest+0x1fc>
 c6a:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 c6e:	81 32       	cpi	r24, 0x21	; 33
 c70:	e9 f5       	brne	.+122    	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 c72:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c76:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 c78:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c7c:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 c80:	81 e0       	ldi	r24, 0x01	; 1
 c82:	91 11       	cpse	r25, r1
 c84:	01 c0       	rjmp	.+2      	; 0xc88 <HID_Device_ProcessControlRequest+0x1a8>
 c86:	80 e0       	ldi	r24, 0x00	; 0
 c88:	f7 01       	movw	r30, r14
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c8a:	80 87       	std	Z+8, r24	; 0x08
 c8c:	2e c0       	rjmp	.+92     	; 0xcea <HID_Device_ProcessControlRequest+0x20a>
 c8e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 c92:	81 32       	cpi	r24, 0x21	; 33
 c94:	59 f5       	brne	.+86     	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 c96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 c9a:	87 7f       	andi	r24, 0xF7	; 247
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 c9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 ca0:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <USB_ControlRequest+0x2>
 ca4:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <USB_ControlRequest+0x3>
 ca8:	88 27       	eor	r24, r24
 caa:	36 e0       	ldi	r19, 0x06	; 6
 cac:	96 95       	lsr	r25
 cae:	87 95       	ror	r24
 cb0:	3a 95       	dec	r19
 cb2:	e1 f7       	brne	.-8      	; 0xcac <HID_Device_ProcessControlRequest+0x1cc>
 cb4:	f7 01       	movw	r30, r14
 cb6:	92 87       	std	Z+10, r25	; 0x0a
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cb8:	81 87       	std	Z+9, r24	; 0x09
 cba:	17 c0       	rjmp	.+46     	; 0xcea <HID_Device_ProcessControlRequest+0x20a>
 cbc:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <USB_ControlRequest>
 cc0:	81 3a       	cpi	r24, 0xA1	; 161
 cc2:	a1 f4       	brne	.+40     	; 0xcec <HID_Device_ProcessControlRequest+0x20c>
 cc4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cc8:	87 7f       	andi	r24, 0xF7	; 247
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 cca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 cce:	f7 01       	movw	r30, r14
 cd0:	81 85       	ldd	r24, Z+9	; 0x09
 cd2:	92 85       	ldd	r25, Z+10	; 0x0a
 cd4:	96 95       	lsr	r25
 cd6:	87 95       	ror	r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 cd8:	96 95       	lsr	r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cda:	87 95       	ror	r24
 cdc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
 ce0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 ce4:	8e 77       	andi	r24, 0x7E	; 126
 ce6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
			}

			break;
	}
}
 cea:	ad db       	rcall	.-2214   	; 0x446 <Endpoint_ClearStatusStage>
 cec:	0f b6       	in	r0, 0x3f	; 63
 cee:	f8 94       	cli
 cf0:	de be       	out	0x3e, r13	; 62
 cf2:	0f be       	out	0x3f, r0	; 63
 cf4:	cd be       	out	0x3d, r12	; 61
 cf6:	0f 90       	pop	r0
 cf8:	0f 90       	pop	r0
 cfa:	0f 90       	pop	r0
 cfc:	df 91       	pop	r29
 cfe:	cf 91       	pop	r28
 d00:	1f 91       	pop	r17
 d02:	0f 91       	pop	r16
 d04:	ff 90       	pop	r15
 d06:	ef 90       	pop	r14
 d08:	df 90       	pop	r13
 d0a:	cf 90       	pop	r12
 d0c:	bf 90       	pop	r11
 d0e:	af 90       	pop	r10
 d10:	9f 90       	pop	r9
 d12:	8f 90       	pop	r8
 d14:	08 95       	ret

00000d16 <HID_Device_ConfigureEndpoints>:

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d16:	cf 93       	push	r28
 d18:	df 93       	push	r29
 d1a:	fc 01       	movw	r30, r24
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 d1c:	dc 01       	movw	r26, r24
 d1e:	18 96       	adiw	r26, 0x08	; 8
 d20:	85 e0       	ldi	r24, 0x05	; 5
 d22:	ed 01       	movw	r28, r26
 d24:	19 92       	st	Y+, r1
 d26:	8a 95       	dec	r24
 d28:	e9 f7       	brne	.-6      	; 0xd24 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 d2a:	81 e0       	ldi	r24, 0x01	; 1
 d2c:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 d2e:	84 ef       	ldi	r24, 0xF4	; 244
 d30:	91 e0       	ldi	r25, 0x01	; 1
 d32:	92 87       	std	Z+10, r25	; 0x0a
 d34:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 d36:	82 81       	ldd	r24, Z+2	; 0x02
 d38:	93 81       	ldd	r25, Z+3	; 0x03
 d3a:	24 81       	ldd	r18, Z+4	; 0x04
 d3c:	21 11       	cpse	r18, r1
 d3e:	02 c0       	rjmp	.+4      	; 0xd44 <HID_Device_ConfigureEndpoints+0x2e>
 d40:	c0 e0       	ldi	r28, 0x00	; 0
 d42:	01 c0       	rjmp	.+2      	; 0xd46 <HID_Device_ConfigureEndpoints+0x30>
 d44:	c4 e0       	ldi	r28, 0x04	; 4
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d46:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d48:	49 db       	rcall	.-2414   	; 0x3dc <Endpoint_BytesToEPSizeMaskDynamic>
 d4a:	8c 2b       	or	r24, r28
 d4c:	48 2f       	mov	r20, r24
 d4e:	42 60       	ori	r20, 0x02	; 2
 d50:	61 ec       	ldi	r22, 0xC1	; 193
	{
		return false;
	}
	
	return true;
}
 d52:	8d 2f       	mov	r24, r29
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	4f cb       	rjmp	.-2402   	; 0x3f8 <Endpoint_ConfigureEndpoint_Prv>

00000d5a <HID_Device_USBTask>:
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d5a:	5f 92       	push	r5
 d5c:	6f 92       	push	r6
 d5e:	7f 92       	push	r7
 d60:	8f 92       	push	r8
 d62:	9f 92       	push	r9
 d64:	af 92       	push	r10
 d66:	bf 92       	push	r11
 d68:	cf 92       	push	r12
 d6a:	df 92       	push	r13
 d6c:	ef 92       	push	r14
 d6e:	ff 92       	push	r15
 d70:	0f 93       	push	r16
 d72:	1f 93       	push	r17
 d74:	cf 93       	push	r28
 d76:	df 93       	push	r29
 d78:	00 d0       	rcall	.+0      	; 0xd7a <HID_Device_USBTask+0x20>
 d7a:	1f 92       	push	r1
 d7c:	cd b7       	in	r28, 0x3d	; 61
 d7e:	de b7       	in	r29, 0x3e	; 62
 d80:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 d82:	ad b6       	in	r10, 0x3d	; 61
 d84:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d86:	8e b3       	in	r24, 0x1e	; 30
 d88:	84 30       	cpi	r24, 0x04	; 4
 d8a:	09 f0       	breq	.+2      	; 0xd8e <HID_Device_USBTask+0x34>
 d8c:	73 c0       	rjmp	.+230    	; 0xe74 <HID_Device_USBTask+0x11a>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 d8e:	f7 01       	movw	r30, r14
 d90:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 d92:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 d96:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
	
	if (Endpoint_IsReadWriteAllowed())
 d9a:	85 ff       	sbrs	r24, 5
 d9c:	6b c0       	rjmp	.+214    	; 0xe74 <HID_Device_USBTask+0x11a>
	{
 d9e:	8d b6       	in	r8, 0x3d	; 61
 da0:	9e b6       	in	r9, 0x3e	; 62
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 da2:	47 81       	ldd	r20, Z+7	; 0x07
 da4:	50 e0       	ldi	r21, 0x00	; 0
 da6:	8d b7       	in	r24, 0x3d	; 61
 da8:	9e b7       	in	r25, 0x3e	; 62
 daa:	84 1b       	sub	r24, r20
 dac:	95 0b       	sbc	r25, r21
 dae:	0f b6       	in	r0, 0x3f	; 63
 db0:	f8 94       	cli
 db2:	9e bf       	out	0x3e, r25	; 62
 db4:	0f be       	out	0x3f, r0	; 63
 db6:	8d bf       	out	0x3d, r24	; 61
 db8:	ed b7       	in	r30, 0x3d	; 61
 dba:	fe b7       	in	r31, 0x3e	; 62
 dbc:	31 96       	adiw	r30, 0x01	; 1
 dbe:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 dc0:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 dc2:	1a 82       	std	Y+2, r1	; 0x02
 dc4:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 dc6:	60 e0       	ldi	r22, 0x00	; 0
 dc8:	70 e0       	ldi	r23, 0x00	; 0
 dca:	cf 01       	movw	r24, r30
 dcc:	87 d0       	rcall	.+270    	; 0xedc <memset>

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 dce:	8e 01       	movw	r16, r28
 dd0:	0f 5f       	subi	r16, 0xFF	; 255
 dd2:	1f 4f       	sbci	r17, 0xFF	; 255
 dd4:	96 01       	movw	r18, r12
 dd6:	40 e0       	ldi	r20, 0x00	; 0
 dd8:	be 01       	movw	r22, r28
 dda:	6d 5f       	subi	r22, 0xFD	; 253
 ddc:	7f 4f       	sbci	r23, 0xFF	; 255
 dde:	c7 01       	movw	r24, r14
 de0:	3c da       	rcall	.-2952   	; 0x25a <CALLBACK_HID_Device_CreateHIDReport>
 de2:	58 2e       	mov	r5, r24
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 de4:	f7 01       	movw	r30, r14
 de6:	81 85       	ldd	r24, Z+9	; 0x09
 de8:	92 85       	ldd	r25, Z+10	; 0x0a
 dea:	89 2b       	or	r24, r25
 dec:	29 f0       	breq	.+10     	; 0xdf8 <HID_Device_USBTask+0x9e>
 dee:	11 e0       	ldi	r17, 0x01	; 1
 df0:	83 85       	ldd	r24, Z+11	; 0x0b
 df2:	94 85       	ldd	r25, Z+12	; 0x0c
 df4:	89 2b       	or	r24, r25
 df6:	09 f0       	breq	.+2      	; 0xdfa <HID_Device_USBTask+0xa0>
 df8:	10 e0       	ldi	r17, 0x00	; 0
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 dfa:	f7 01       	movw	r30, r14
 dfc:	65 80       	ldd	r6, Z+5	; 0x05
 dfe:	76 80       	ldd	r7, Z+6	; 0x06
 e00:	61 14       	cp	r6, r1
 e02:	71 04       	cpc	r7, r1
 e04:	81 f0       	breq	.+32     	; 0xe26 <HID_Device_USBTask+0xcc>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 e06:	49 81       	ldd	r20, Y+1	; 0x01
 e08:	5a 81       	ldd	r21, Y+2	; 0x02
 e0a:	b3 01       	movw	r22, r6
 e0c:	c6 01       	movw	r24, r12
 e0e:	50 d0       	rcall	.+160    	; 0xeb0 <memcmp>
 e10:	01 e0       	ldi	r16, 0x01	; 1
 e12:	89 2b       	or	r24, r25
 e14:	09 f4       	brne	.+2      	; 0xe18 <HID_Device_USBTask+0xbe>
 e16:	00 e0       	ldi	r16, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 e18:	f7 01       	movw	r30, r14
 e1a:	47 81       	ldd	r20, Z+7	; 0x07
 e1c:	50 e0       	ldi	r21, 0x00	; 0
 e1e:	b6 01       	movw	r22, r12
 e20:	c3 01       	movw	r24, r6
 e22:	53 d0       	rcall	.+166    	; 0xeca <memcpy>
 e24:	01 c0       	rjmp	.+2      	; 0xe28 <HID_Device_USBTask+0xce>

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 e26:	00 e0       	ldi	r16, 0x00	; 0
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 e28:	89 81       	ldd	r24, Y+1	; 0x01
 e2a:	9a 81       	ldd	r25, Y+2	; 0x02
 e2c:	89 2b       	or	r24, r25
 e2e:	e9 f0       	breq	.+58     	; 0xe6a <HID_Device_USBTask+0x110>
 e30:	51 10       	cpse	r5, r1
 e32:	04 c0       	rjmp	.+8      	; 0xe3c <HID_Device_USBTask+0xe2>
 e34:	01 11       	cpse	r16, r1
 e36:	02 c0       	rjmp	.+4      	; 0xe3c <HID_Device_USBTask+0xe2>
 e38:	10 ff       	sbrs	r17, 0
 e3a:	17 c0       	rjmp	.+46     	; 0xe6a <HID_Device_USBTask+0x110>
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 e3c:	f7 01       	movw	r30, r14
 e3e:	81 85       	ldd	r24, Z+9	; 0x09
 e40:	92 85       	ldd	r25, Z+10	; 0x0a
 e42:	94 87       	std	Z+12, r25	; 0x0c
 e44:	83 87       	std	Z+11, r24	; 0x0b

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e46:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e48:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__EEPROM_REGION_LENGTH__+0x7f00e9>

			if (ReportID)
 e4c:	8b 81       	ldd	r24, Y+3	; 0x03
 e4e:	81 11       	cpse	r24, r1
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e50:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__EEPROM_REGION_LENGTH__+0x7f00f1>
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 e54:	69 81       	ldd	r22, Y+1	; 0x01
 e56:	7a 81       	ldd	r23, Y+2	; 0x02
 e58:	40 e0       	ldi	r20, 0x00	; 0
 e5a:	50 e0       	ldi	r21, 0x00	; 0
 e5c:	c6 01       	movw	r24, r12
 e5e:	3d db       	rcall	.-2438   	; 0x4da <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e64:	8e 77       	andi	r24, 0x7E	; 126
 e66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__EEPROM_REGION_LENGTH__+0x7f00e8>
 e6a:	0f b6       	in	r0, 0x3f	; 63
 e6c:	f8 94       	cli
 e6e:	9e be       	out	0x3e, r9	; 62
 e70:	0f be       	out	0x3f, r0	; 63
 e72:	8d be       	out	0x3d, r8	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 e74:	0f b6       	in	r0, 0x3f	; 63
 e76:	f8 94       	cli
 e78:	be be       	out	0x3e, r11	; 62
 e7a:	0f be       	out	0x3f, r0	; 63
 e7c:	ad be       	out	0x3d, r10	; 61
 e7e:	0f 90       	pop	r0
 e80:	0f 90       	pop	r0
 e82:	0f 90       	pop	r0
 e84:	df 91       	pop	r29
 e86:	cf 91       	pop	r28
 e88:	1f 91       	pop	r17
 e8a:	0f 91       	pop	r16
 e8c:	ff 90       	pop	r15
 e8e:	ef 90       	pop	r14
 e90:	df 90       	pop	r13
 e92:	cf 90       	pop	r12
 e94:	bf 90       	pop	r11
 e96:	af 90       	pop	r10
 e98:	9f 90       	pop	r9
 e9a:	8f 90       	pop	r8
 e9c:	7f 90       	pop	r7
 e9e:	6f 90       	pop	r6
 ea0:	5f 90       	pop	r5
 ea2:	08 95       	ret

00000ea4 <__tablejump2__>:
 ea4:	ee 0f       	add	r30, r30
 ea6:	ff 1f       	adc	r31, r31
 ea8:	05 90       	lpm	r0, Z+
 eaa:	f4 91       	lpm	r31, Z
 eac:	e0 2d       	mov	r30, r0
 eae:	09 94       	ijmp

00000eb0 <memcmp>:
 eb0:	fb 01       	movw	r30, r22
 eb2:	dc 01       	movw	r26, r24
 eb4:	04 c0       	rjmp	.+8      	; 0xebe <memcmp+0xe>
 eb6:	8d 91       	ld	r24, X+
 eb8:	01 90       	ld	r0, Z+
 eba:	80 19       	sub	r24, r0
 ebc:	21 f4       	brne	.+8      	; 0xec6 <memcmp+0x16>
 ebe:	41 50       	subi	r20, 0x01	; 1
 ec0:	50 40       	sbci	r21, 0x00	; 0
 ec2:	c8 f7       	brcc	.-14     	; 0xeb6 <memcmp+0x6>
 ec4:	88 1b       	sub	r24, r24
 ec6:	99 0b       	sbc	r25, r25
 ec8:	08 95       	ret

00000eca <memcpy>:
 eca:	fb 01       	movw	r30, r22
 ecc:	dc 01       	movw	r26, r24
 ece:	02 c0       	rjmp	.+4      	; 0xed4 <memcpy+0xa>
 ed0:	01 90       	ld	r0, Z+
 ed2:	0d 92       	st	X+, r0
 ed4:	41 50       	subi	r20, 0x01	; 1
 ed6:	50 40       	sbci	r21, 0x00	; 0
 ed8:	d8 f7       	brcc	.-10     	; 0xed0 <memcpy+0x6>
 eda:	08 95       	ret

00000edc <memset>:
 edc:	dc 01       	movw	r26, r24
 ede:	01 c0       	rjmp	.+2      	; 0xee2 <memset+0x6>
 ee0:	6d 93       	st	X+, r22
 ee2:	41 50       	subi	r20, 0x01	; 1
 ee4:	50 40       	sbci	r21, 0x00	; 0
 ee6:	e0 f7       	brcc	.-8      	; 0xee0 <memset+0x4>
 ee8:	08 95       	ret

00000eea <_exit>:
 eea:	f8 94       	cli

00000eec <__stop_program>:
 eec:	ff cf       	rjmp	.-2      	; 0xeec <__stop_program>
